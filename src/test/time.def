;;;-----------------------------------------------------------------------------
;;; CLiCC: The Common Lisp to C Compiler
;;; Copyright (C) 1994 Wolfgang Goerigk, Ulrich Hoffmann, Heinz Knutzen 
;;; Christian-Albrechts-Universitaet zu Kiel, Germany
;;;-----------------------------------------------------------------------------
;;; CLiCC has been developed as part of the APPLY research project,
;;; funded by the German Ministry of Research and Technology.
;;; 
;;; CLiCC is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; CLiCC is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License in file COPYING for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;;;-----------------------------------------------------------------------------
;;; Content  : Declarations of UNIX times function and clock-t, tms types
;;;
;;; $Revision: 1.4 $
;;; $Id: time.def,v 1.4 1994/11/25 13:12:33 pm Exp $
;;;-----------------------------------------------------------------------------

;;;----------------------------------------------------------------------
;;; typedef	long	clock_t;	/* units=ticks (typically 60/sec) */
;;;
;;;
;;;struct tms {
;;;	clock_t	tms_utime;		/* user time */
;;;	clock_t	tms_stime;		/* system time */
;;;	clock_t	tms_cutime;		/* user time, children */
;;;	clock_t	tms_cstime;		/* system time, children */
;;;}
;;;
;;;#ifndef	KERNEL
;;;clock_t times(/* struct tms *tmsp */);
;;;#endif
;;;----------------------------------------------------------------------

(sys-include "sys/times.h")

(def-c-type clock-t c-long)
(def-c-type tms
	(c-struct 
		(utime clock-t) 
		(stime clock-t) 
		(cutime clock-t) 
		(cstime clock-t)))
(def-call-out times 
	:name "times" 
	:arguments ((c-ptr tms))
	:return-type clock-t)


